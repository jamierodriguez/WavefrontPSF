# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
donutengine calculates out of focus stars from a pupil plane Zernike expansion, for the DECam, Aaron Roodman 2012
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_donutengine', [dirname(__file__)])
        except ImportError:
            import _donutengine
            return _donutengine
        if fp is not None:
            try:
                _mod = imp.load_module('_donutengine', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _donutengine = swig_import_helper()
    del swig_import_helper
else:
    import _donutengine
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _donutengine.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator const *

        """
        return _donutengine.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _donutengine.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _donutengine.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _donutengine.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _donutengine.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator const *

        """
        return _donutengine.SwigPyIterator_copy(self)

    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _donutengine.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _donutengine.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _donutengine.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _donutengine.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _donutengine.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _donutengine.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _donutengine.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _donutengine.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _donutengine.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _donutengine.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _donutengine.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(IntVector self) -> SwigPyIterator

        Parameters:
            self: std::vector< int > *

        """
        return _donutengine.IntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(IntVector self) -> bool

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(IntVector self) -> bool

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector___bool__(self)

    def __len__(self):
        """
        __len__(IntVector self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector___len__(self)

    def pop(self):
        """
        pop(IntVector self) -> std::vector< int >::value_type

        Parameters:
            self: std::vector< int > *

        """
        return _donutengine.IntVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type

        """
        return _donutengine.IntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v=std::vector< int,std::allocator< int > >())

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type
            v: std::vector< int,std::allocator< int > > const &

        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type

        """
        return _donutengine.IntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type

        """
        return _donutengine.IntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntVector self, std::vector< int >::difference_type i)

        Parameters:
            i: std::vector< int >::difference_type

        __delitem__(IntVector self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _donutengine.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector

        Parameters:
            slice: PySliceObject *

        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters:
            i: std::vector< int >::difference_type

        """
        return _donutengine.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< int,std::allocator< int > > const &

        __setitem__(IntVector self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters:
            i: std::vector< int >::difference_type
            x: std::vector< int >::value_type const &

        """
        return _donutengine.IntVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(IntVector self, std::vector< int >::value_type const & x)

        Parameters:
            x: std::vector< int >::value_type const &

        """
        return _donutengine.IntVector_append(self, *args)

    def empty(self):
        """
        empty(IntVector self) -> bool

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector_empty(self)

    def size(self):
        """
        size(IntVector self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector_size(self)

    def clear(self):
        """
        clear(IntVector self)

        Parameters:
            self: std::vector< int > *

        """
        return _donutengine.IntVector_clear(self)

    def swap(self, *args):
        """
        swap(IntVector self, IntVector v)

        Parameters:
            v: std::vector< int > &

        """
        return _donutengine.IntVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(IntVector self) -> std::vector< int >::allocator_type

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector_get_allocator(self)

    def begin(self):
        """
        begin(IntVector self) -> std::vector< int >::iterator

        Parameters:
            self: std::vector< int > *

        """
        return _donutengine.IntVector_begin(self)

    def end(self):
        """
        end(IntVector self) -> std::vector< int >::iterator

        Parameters:
            self: std::vector< int > *

        """
        return _donutengine.IntVector_end(self)

    def rbegin(self):
        """
        rbegin(IntVector self) -> std::vector< int >::reverse_iterator

        Parameters:
            self: std::vector< int > *

        """
        return _donutengine.IntVector_rbegin(self)

    def rend(self):
        """
        rend(IntVector self) -> std::vector< int >::reverse_iterator

        Parameters:
            self: std::vector< int > *

        """
        return _donutengine.IntVector_rend(self)

    def pop_back(self):
        """
        pop_back(IntVector self)

        Parameters:
            self: std::vector< int > *

        """
        return _donutengine.IntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters:
            pos: std::vector< int >::iterator

        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters:
            first: std::vector< int >::iterator
            last: std::vector< int >::iterator

        """
        return _donutengine.IntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int)> self) -> IntVector
        __init__(std::vector<(int)> self, IntVector arg2) -> IntVector

        Parameters:
            arg2: std::vector< int > const &

        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> IntVector

        Parameters:
            size: std::vector< int >::size_type

        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector

        Parameters:
            size: std::vector< int >::size_type
            value: std::vector< int >::value_type const &

        """
        this = _donutengine.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(IntVector self, std::vector< int >::value_type const & x)

        Parameters:
            x: std::vector< int >::value_type const &

        """
        return _donutengine.IntVector_push_back(self, *args)

    def front(self):
        """
        front(IntVector self) -> std::vector< int >::value_type const &

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector_front(self)

    def back(self):
        """
        back(IntVector self) -> std::vector< int >::value_type const &

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector_back(self)

    def assign(self, *args):
        """
        assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters:
            n: std::vector< int >::size_type
            x: std::vector< int >::value_type const &

        """
        return _donutengine.IntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntVector self, std::vector< int >::size_type new_size)

        Parameters:
            new_size: std::vector< int >::size_type

        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters:
            new_size: std::vector< int >::size_type
            x: std::vector< int >::value_type const &

        """
        return _donutengine.IntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters:
            pos: std::vector< int >::iterator
            x: std::vector< int >::value_type const &

        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters:
            pos: std::vector< int >::iterator
            n: std::vector< int >::size_type
            x: std::vector< int >::value_type const &

        """
        return _donutengine.IntVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(IntVector self, std::vector< int >::size_type n)

        Parameters:
            n: std::vector< int >::size_type

        """
        return _donutengine.IntVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(IntVector self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *

        """
        return _donutengine.IntVector_capacity(self)

    __swig_destroy__ = _donutengine.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _donutengine.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(DoubleVector self) -> SwigPyIterator

        Parameters:
            self: std::vector< double > *

        """
        return _donutengine.DoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(DoubleVector self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(DoubleVector self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector___bool__(self)

    def __len__(self):
        """
        __len__(DoubleVector self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector___len__(self)

    def pop(self):
        """
        pop(DoubleVector self) -> std::vector< double >::value_type

        Parameters:
            self: std::vector< double > *

        """
        return _donutengine.DoubleVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _donutengine.DoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            DoubleVector v=std::vector< double,std::allocator< double > >())

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type
            v: std::vector< double,std::allocator< double > > const &

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _donutengine.DoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _donutengine.DoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters:
            i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _donutengine.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters:
            slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters:
            i: std::vector< double >::difference_type

        """
        return _donutengine.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters:
            i: std::vector< double >::difference_type
            x: std::vector< double >::value_type const &

        """
        return _donutengine.DoubleVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters:
            x: std::vector< double >::value_type const &

        """
        return _donutengine.DoubleVector_append(self, *args)

    def empty(self):
        """
        empty(DoubleVector self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector_empty(self)

    def size(self):
        """
        size(DoubleVector self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector_size(self)

    def clear(self):
        """
        clear(DoubleVector self)

        Parameters:
            self: std::vector< double > *

        """
        return _donutengine.DoubleVector_clear(self)

    def swap(self, *args):
        """
        swap(DoubleVector self, DoubleVector v)

        Parameters:
            v: std::vector< double > &

        """
        return _donutengine.DoubleVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(DoubleVector self) -> std::vector< double >::allocator_type

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector_get_allocator(self)

    def begin(self):
        """
        begin(DoubleVector self) -> std::vector< double >::iterator

        Parameters:
            self: std::vector< double > *

        """
        return _donutengine.DoubleVector_begin(self)

    def end(self):
        """
        end(DoubleVector self) -> std::vector< double >::iterator

        Parameters:
            self: std::vector< double > *

        """
        return _donutengine.DoubleVector_end(self)

    def rbegin(self):
        """
        rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters:
            self: std::vector< double > *

        """
        return _donutengine.DoubleVector_rbegin(self)

    def rend(self):
        """
        rend(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters:
            self: std::vector< double > *

        """
        return _donutengine.DoubleVector_rend(self)

    def pop_back(self):
        """
        pop_back(DoubleVector self)

        Parameters:
            self: std::vector< double > *

        """
        return _donutengine.DoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters:
            pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters:
            first: std::vector< double >::iterator
            last: std::vector< double >::iterator

        """
        return _donutengine.DoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector

        Parameters:
            arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector

        Parameters:
            size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters:
            size: std::vector< double >::size_type
            value: std::vector< double >::value_type const &

        """
        this = _donutengine.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters:
            x: std::vector< double >::value_type const &

        """
        return _donutengine.DoubleVector_push_back(self, *args)

    def front(self):
        """
        front(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector_front(self)

    def back(self):
        """
        back(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector_back(self)

    def assign(self, *args):
        """
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters:
            n: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _donutengine.DoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters:
            new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters:
            new_size: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _donutengine.DoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters:
            pos: std::vector< double >::iterator
            x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters:
            pos: std::vector< double >::iterator
            n: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _donutengine.DoubleVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters:
            n: std::vector< double >::size_type

        """
        return _donutengine.DoubleVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(DoubleVector self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _donutengine.DoubleVector_capacity(self)

    __swig_destroy__ = _donutengine.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _donutengine.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(StringVector self) -> SwigPyIterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _donutengine.StringVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(StringVector self) -> bool

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(StringVector self) -> bool

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector___bool__(self)

    def __len__(self):
        """
        __len__(StringVector self) -> std::vector< std::string >::size_type

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector___len__(self)

    def pop(self):
        """
        pop(StringVector self) -> std::vector< std::string >::value_type

        Parameters:
            self: std::vector< std::string > *

        """
        return _donutengine.StringVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector

        Parameters:
            i: std::vector< std::string >::difference_type
            j: std::vector< std::string >::difference_type

        """
        return _donutengine.StringVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            StringVector v=std::vector< std::string,std::allocator< std::string > >())

        Parameters:
            i: std::vector< std::string >::difference_type
            j: std::vector< std::string >::difference_type
            v: std::vector< std::string,std::allocator< std::string > > const &

        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters:
            i: std::vector< std::string >::difference_type
            j: std::vector< std::string >::difference_type

        """
        return _donutengine.StringVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters:
            i: std::vector< std::string >::difference_type
            j: std::vector< std::string >::difference_type

        """
        return _donutengine.StringVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)

        Parameters:
            i: std::vector< std::string >::difference_type

        __delitem__(StringVector self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _donutengine.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector

        Parameters:
            slice: PySliceObject *

        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters:
            i: std::vector< std::string >::difference_type

        """
        return _donutengine.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StringVector self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters:
            i: std::vector< std::string >::difference_type
            x: std::vector< std::string >::value_type const &

        """
        return _donutengine.StringVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters:
            x: std::vector< std::string >::value_type const &

        """
        return _donutengine.StringVector_append(self, *args)

    def empty(self):
        """
        empty(StringVector self) -> bool

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector_empty(self)

    def size(self):
        """
        size(StringVector self) -> std::vector< std::string >::size_type

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector_size(self)

    def clear(self):
        """
        clear(StringVector self)

        Parameters:
            self: std::vector< std::string > *

        """
        return _donutengine.StringVector_clear(self)

    def swap(self, *args):
        """
        swap(StringVector self, StringVector v)

        Parameters:
            v: std::vector< std::string > &

        """
        return _donutengine.StringVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(StringVector self) -> std::vector< std::string >::allocator_type

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector_get_allocator(self)

    def begin(self):
        """
        begin(StringVector self) -> std::vector< std::string >::iterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _donutengine.StringVector_begin(self)

    def end(self):
        """
        end(StringVector self) -> std::vector< std::string >::iterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _donutengine.StringVector_end(self)

    def rbegin(self):
        """
        rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _donutengine.StringVector_rbegin(self)

    def rend(self):
        """
        rend(StringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _donutengine.StringVector_rend(self)

    def pop_back(self):
        """
        pop_back(StringVector self)

        Parameters:
            self: std::vector< std::string > *

        """
        return _donutengine.StringVector_pop_back(self)

    def erase(self, *args):
        """
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters:
            pos: std::vector< std::string >::iterator

        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters:
            first: std::vector< std::string >::iterator
            last: std::vector< std::string >::iterator

        """
        return _donutengine.StringVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> StringVector
        __init__(std::vector<(std::string)> self, StringVector arg2) -> StringVector

        Parameters:
            arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StringVector

        Parameters:
            size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector

        Parameters:
            size: std::vector< std::string >::size_type
            value: std::vector< std::string >::value_type const &

        """
        this = _donutengine.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters:
            x: std::vector< std::string >::value_type const &

        """
        return _donutengine.StringVector_push_back(self, *args)

    def front(self):
        """
        front(StringVector self) -> std::vector< std::string >::value_type const &

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector_front(self)

    def back(self):
        """
        back(StringVector self) -> std::vector< std::string >::value_type const &

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector_back(self)

    def assign(self, *args):
        """
        assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters:
            n: std::vector< std::string >::size_type
            x: std::vector< std::string >::value_type const &

        """
        return _donutengine.StringVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(StringVector self, std::vector< std::string >::size_type new_size)

        Parameters:
            new_size: std::vector< std::string >::size_type

        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters:
            new_size: std::vector< std::string >::size_type
            x: std::vector< std::string >::value_type const &

        """
        return _donutengine.StringVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters:
            pos: std::vector< std::string >::iterator
            x: std::vector< std::string >::value_type const &

        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)

        Parameters:
            pos: std::vector< std::string >::iterator
            n: std::vector< std::string >::size_type
            x: std::vector< std::string >::value_type const &

        """
        return _donutengine.StringVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(StringVector self, std::vector< std::string >::size_type n)

        Parameters:
            n: std::vector< std::string >::size_type

        """
        return _donutengine.StringVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(StringVector self) -> std::vector< std::string >::size_type

        Parameters:
            self: std::vector< std::string > const *

        """
        return _donutengine.StringVector_capacity(self)

    __swig_destroy__ = _donutengine.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _donutengine.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringToStringMap(_object):
    """Proxy of C++ std::map<(std::string,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringToStringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringToStringMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(StringToStringMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(StringToStringMap self) -> bool

        Parameters:
            self: std::map< std::string,std::string > const *

        """
        return _donutengine.StringToStringMap___nonzero__(self)

    def __bool__(self):
        """
        __bool__(StringToStringMap self) -> bool

        Parameters:
            self: std::map< std::string,std::string > const *

        """
        return _donutengine.StringToStringMap___bool__(self)

    def __len__(self):
        """
        __len__(StringToStringMap self) -> std::map< std::string,std::string >::size_type

        Parameters:
            self: std::map< std::string,std::string > const *

        """
        return _donutengine.StringToStringMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(StringToStringMap self, std::map< std::string,std::string >::key_type const & key) -> std::map< std::string,std::string >::mapped_type const &

        Parameters:
            key: std::map< std::string,std::string >::key_type const &

        """
        return _donutengine.StringToStringMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(StringToStringMap self, std::map< std::string,std::string >::key_type const & key)

        Parameters:
            key: std::map< std::string,std::string >::key_type const &

        """
        return _donutengine.StringToStringMap___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(StringToStringMap self, std::map< std::string,std::string >::key_type const & key) -> bool

        Parameters:
            key: std::map< std::string,std::string >::key_type const &

        """
        return _donutengine.StringToStringMap_has_key(self, *args)

    def keys(self):
        """
        keys(StringToStringMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_keys(self)

    def values(self):
        """
        values(StringToStringMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_values(self)

    def items(self):
        """
        items(StringToStringMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_items(self)

    def __contains__(self, *args):
        """
        __contains__(StringToStringMap self, std::map< std::string,std::string >::key_type const & key) -> bool

        Parameters:
            key: std::map< std::string,std::string >::key_type const &

        """
        return _donutengine.StringToStringMap___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(StringToStringMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(StringToStringMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(StringToStringMap self, std::map< std::string,std::string >::key_type const & key)

        Parameters:
            key: std::map< std::string,std::string >::key_type const &

        __setitem__(StringToStringMap self, std::map< std::string,std::string >::key_type const & key, std::map< std::string,std::string >::mapped_type const & x)

        Parameters:
            key: std::map< std::string,std::string >::key_type const &
            x: std::map< std::string,std::string >::mapped_type const &

        """
        return _donutengine.StringToStringMap___setitem__(self, *args)

    def asdict(self):
        """
        asdict(StringToStringMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,std::string)> self, std::less< std::string > const & arg2) -> StringToStringMap

        Parameters:
            arg2: std::less< std::string > const &

        __init__(std::map<(std::string,std::string)> self) -> StringToStringMap
        __init__(std::map<(std::string,std::string)> self, StringToStringMap arg2) -> StringToStringMap

        Parameters:
            arg2: std::map< std::string,std::string > const &

        """
        this = _donutengine.new_StringToStringMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(StringToStringMap self) -> bool

        Parameters:
            self: std::map< std::string,std::string > const *

        """
        return _donutengine.StringToStringMap_empty(self)

    def size(self):
        """
        size(StringToStringMap self) -> std::map< std::string,std::string >::size_type

        Parameters:
            self: std::map< std::string,std::string > const *

        """
        return _donutengine.StringToStringMap_size(self)

    def clear(self):
        """
        clear(StringToStringMap self)

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_clear(self)

    def swap(self, *args):
        """
        swap(StringToStringMap self, StringToStringMap v)

        Parameters:
            v: std::map< std::string,std::string > &

        """
        return _donutengine.StringToStringMap_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(StringToStringMap self) -> std::map< std::string,std::string >::allocator_type

        Parameters:
            self: std::map< std::string,std::string > const *

        """
        return _donutengine.StringToStringMap_get_allocator(self)

    def begin(self):
        """
        begin(StringToStringMap self) -> std::map< std::string,std::string >::iterator

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_begin(self)

    def end(self):
        """
        end(StringToStringMap self) -> std::map< std::string,std::string >::iterator

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_end(self)

    def rbegin(self):
        """
        rbegin(StringToStringMap self) -> std::map< std::string,std::string >::reverse_iterator

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_rbegin(self)

    def rend(self):
        """
        rend(StringToStringMap self) -> std::map< std::string,std::string >::reverse_iterator

        Parameters:
            self: std::map< std::string,std::string > *

        """
        return _donutengine.StringToStringMap_rend(self)

    def count(self, *args):
        """
        count(StringToStringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type

        Parameters:
            x: std::map< std::string,std::string >::key_type const &

        """
        return _donutengine.StringToStringMap_count(self, *args)

    def erase(self, *args):
        """
        erase(StringToStringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type

        Parameters:
            x: std::map< std::string,std::string >::key_type const &

        erase(StringToStringMap self, std::map< std::string,std::string >::iterator position)

        Parameters:
            position: std::map< std::string,std::string >::iterator

        erase(StringToStringMap self, std::map< std::string,std::string >::iterator first, std::map< std::string,std::string >::iterator last)

        Parameters:
            first: std::map< std::string,std::string >::iterator
            last: std::map< std::string,std::string >::iterator

        """
        return _donutengine.StringToStringMap_erase(self, *args)

    def find(self, *args):
        """
        find(StringToStringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters:
            x: std::map< std::string,std::string >::key_type const &

        """
        return _donutengine.StringToStringMap_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(StringToStringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters:
            x: std::map< std::string,std::string >::key_type const &

        """
        return _donutengine.StringToStringMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(StringToStringMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters:
            x: std::map< std::string,std::string >::key_type const &

        """
        return _donutengine.StringToStringMap_upper_bound(self, *args)

    __swig_destroy__ = _donutengine.delete_StringToStringMap
    __del__ = lambda self : None;
StringToStringMap_swigregister = _donutengine.StringToStringMap_swigregister
StringToStringMap_swigregister(StringToStringMap)

class StringToIntMap(_object):
    """Proxy of C++ std::map<(std::string,int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringToIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringToIntMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(StringToIntMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(StringToIntMap self) -> bool

        Parameters:
            self: std::map< std::string,int > const *

        """
        return _donutengine.StringToIntMap___nonzero__(self)

    def __bool__(self):
        """
        __bool__(StringToIntMap self) -> bool

        Parameters:
            self: std::map< std::string,int > const *

        """
        return _donutengine.StringToIntMap___bool__(self)

    def __len__(self):
        """
        __len__(StringToIntMap self) -> std::map< std::string,int >::size_type

        Parameters:
            self: std::map< std::string,int > const *

        """
        return _donutengine.StringToIntMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(StringToIntMap self, std::map< std::string,int >::key_type const & key) -> std::map< std::string,int >::mapped_type const &

        Parameters:
            key: std::map< std::string,int >::key_type const &

        """
        return _donutengine.StringToIntMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(StringToIntMap self, std::map< std::string,int >::key_type const & key)

        Parameters:
            key: std::map< std::string,int >::key_type const &

        """
        return _donutengine.StringToIntMap___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(StringToIntMap self, std::map< std::string,int >::key_type const & key) -> bool

        Parameters:
            key: std::map< std::string,int >::key_type const &

        """
        return _donutengine.StringToIntMap_has_key(self, *args)

    def keys(self):
        """
        keys(StringToIntMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_keys(self)

    def values(self):
        """
        values(StringToIntMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_values(self)

    def items(self):
        """
        items(StringToIntMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_items(self)

    def __contains__(self, *args):
        """
        __contains__(StringToIntMap self, std::map< std::string,int >::key_type const & key) -> bool

        Parameters:
            key: std::map< std::string,int >::key_type const &

        """
        return _donutengine.StringToIntMap___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(StringToIntMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(StringToIntMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(StringToIntMap self, std::map< std::string,int >::key_type const & key)

        Parameters:
            key: std::map< std::string,int >::key_type const &

        __setitem__(StringToIntMap self, std::map< std::string,int >::key_type const & key, std::map< std::string,int >::mapped_type const & x)

        Parameters:
            key: std::map< std::string,int >::key_type const &
            x: std::map< std::string,int >::mapped_type const &

        """
        return _donutengine.StringToIntMap___setitem__(self, *args)

    def asdict(self):
        """
        asdict(StringToIntMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,int)> self, std::less< std::string > const & arg2) -> StringToIntMap

        Parameters:
            arg2: std::less< std::string > const &

        __init__(std::map<(std::string,int)> self) -> StringToIntMap
        __init__(std::map<(std::string,int)> self, StringToIntMap arg2) -> StringToIntMap

        Parameters:
            arg2: std::map< std::string,int > const &

        """
        this = _donutengine.new_StringToIntMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(StringToIntMap self) -> bool

        Parameters:
            self: std::map< std::string,int > const *

        """
        return _donutengine.StringToIntMap_empty(self)

    def size(self):
        """
        size(StringToIntMap self) -> std::map< std::string,int >::size_type

        Parameters:
            self: std::map< std::string,int > const *

        """
        return _donutengine.StringToIntMap_size(self)

    def clear(self):
        """
        clear(StringToIntMap self)

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_clear(self)

    def swap(self, *args):
        """
        swap(StringToIntMap self, StringToIntMap v)

        Parameters:
            v: std::map< std::string,int > &

        """
        return _donutengine.StringToIntMap_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(StringToIntMap self) -> std::map< std::string,int >::allocator_type

        Parameters:
            self: std::map< std::string,int > const *

        """
        return _donutengine.StringToIntMap_get_allocator(self)

    def begin(self):
        """
        begin(StringToIntMap self) -> std::map< std::string,int >::iterator

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_begin(self)

    def end(self):
        """
        end(StringToIntMap self) -> std::map< std::string,int >::iterator

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_end(self)

    def rbegin(self):
        """
        rbegin(StringToIntMap self) -> std::map< std::string,int >::reverse_iterator

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_rbegin(self)

    def rend(self):
        """
        rend(StringToIntMap self) -> std::map< std::string,int >::reverse_iterator

        Parameters:
            self: std::map< std::string,int > *

        """
        return _donutengine.StringToIntMap_rend(self)

    def count(self, *args):
        """
        count(StringToIntMap self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::size_type

        Parameters:
            x: std::map< std::string,int >::key_type const &

        """
        return _donutengine.StringToIntMap_count(self, *args)

    def erase(self, *args):
        """
        erase(StringToIntMap self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::size_type

        Parameters:
            x: std::map< std::string,int >::key_type const &

        erase(StringToIntMap self, std::map< std::string,int >::iterator position)

        Parameters:
            position: std::map< std::string,int >::iterator

        erase(StringToIntMap self, std::map< std::string,int >::iterator first, std::map< std::string,int >::iterator last)

        Parameters:
            first: std::map< std::string,int >::iterator
            last: std::map< std::string,int >::iterator

        """
        return _donutengine.StringToIntMap_erase(self, *args)

    def find(self, *args):
        """
        find(StringToIntMap self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator

        Parameters:
            x: std::map< std::string,int >::key_type const &

        """
        return _donutengine.StringToIntMap_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(StringToIntMap self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator

        Parameters:
            x: std::map< std::string,int >::key_type const &

        """
        return _donutengine.StringToIntMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(StringToIntMap self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator

        Parameters:
            x: std::map< std::string,int >::key_type const &

        """
        return _donutengine.StringToIntMap_upper_bound(self, *args)

    __swig_destroy__ = _donutengine.delete_StringToIntMap
    __del__ = lambda self : None;
StringToIntMap_swigregister = _donutengine.StringToIntMap_swigregister
StringToIntMap_swigregister(StringToIntMap)

class StringToDoubleMap(_object):
    """Proxy of C++ std::map<(std::string,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringToDoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringToDoubleMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(StringToDoubleMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(StringToDoubleMap self) -> bool

        Parameters:
            self: std::map< std::string,double > const *

        """
        return _donutengine.StringToDoubleMap___nonzero__(self)

    def __bool__(self):
        """
        __bool__(StringToDoubleMap self) -> bool

        Parameters:
            self: std::map< std::string,double > const *

        """
        return _donutengine.StringToDoubleMap___bool__(self)

    def __len__(self):
        """
        __len__(StringToDoubleMap self) -> std::map< std::string,double >::size_type

        Parameters:
            self: std::map< std::string,double > const *

        """
        return _donutengine.StringToDoubleMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(StringToDoubleMap self, std::map< std::string,double >::key_type const & key) -> std::map< std::string,double >::mapped_type const &

        Parameters:
            key: std::map< std::string,double >::key_type const &

        """
        return _donutengine.StringToDoubleMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(StringToDoubleMap self, std::map< std::string,double >::key_type const & key)

        Parameters:
            key: std::map< std::string,double >::key_type const &

        """
        return _donutengine.StringToDoubleMap___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(StringToDoubleMap self, std::map< std::string,double >::key_type const & key) -> bool

        Parameters:
            key: std::map< std::string,double >::key_type const &

        """
        return _donutengine.StringToDoubleMap_has_key(self, *args)

    def keys(self):
        """
        keys(StringToDoubleMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_keys(self)

    def values(self):
        """
        values(StringToDoubleMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_values(self)

    def items(self):
        """
        items(StringToDoubleMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_items(self)

    def __contains__(self, *args):
        """
        __contains__(StringToDoubleMap self, std::map< std::string,double >::key_type const & key) -> bool

        Parameters:
            key: std::map< std::string,double >::key_type const &

        """
        return _donutengine.StringToDoubleMap___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(StringToDoubleMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(StringToDoubleMap self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(StringToDoubleMap self, std::map< std::string,double >::key_type const & key)

        Parameters:
            key: std::map< std::string,double >::key_type const &

        __setitem__(StringToDoubleMap self, std::map< std::string,double >::key_type const & key, std::map< std::string,double >::mapped_type const & x)

        Parameters:
            key: std::map< std::string,double >::key_type const &
            x: std::map< std::string,double >::mapped_type const &

        """
        return _donutengine.StringToDoubleMap___setitem__(self, *args)

    def asdict(self):
        """
        asdict(StringToDoubleMap self) -> PyObject *

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,double)> self, std::less< std::string > const & arg2) -> StringToDoubleMap

        Parameters:
            arg2: std::less< std::string > const &

        __init__(std::map<(std::string,double)> self) -> StringToDoubleMap
        __init__(std::map<(std::string,double)> self, StringToDoubleMap arg2) -> StringToDoubleMap

        Parameters:
            arg2: std::map< std::string,double > const &

        """
        this = _donutengine.new_StringToDoubleMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(StringToDoubleMap self) -> bool

        Parameters:
            self: std::map< std::string,double > const *

        """
        return _donutengine.StringToDoubleMap_empty(self)

    def size(self):
        """
        size(StringToDoubleMap self) -> std::map< std::string,double >::size_type

        Parameters:
            self: std::map< std::string,double > const *

        """
        return _donutengine.StringToDoubleMap_size(self)

    def clear(self):
        """
        clear(StringToDoubleMap self)

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_clear(self)

    def swap(self, *args):
        """
        swap(StringToDoubleMap self, StringToDoubleMap v)

        Parameters:
            v: std::map< std::string,double > &

        """
        return _donutengine.StringToDoubleMap_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(StringToDoubleMap self) -> std::map< std::string,double >::allocator_type

        Parameters:
            self: std::map< std::string,double > const *

        """
        return _donutengine.StringToDoubleMap_get_allocator(self)

    def begin(self):
        """
        begin(StringToDoubleMap self) -> std::map< std::string,double >::iterator

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_begin(self)

    def end(self):
        """
        end(StringToDoubleMap self) -> std::map< std::string,double >::iterator

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_end(self)

    def rbegin(self):
        """
        rbegin(StringToDoubleMap self) -> std::map< std::string,double >::reverse_iterator

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_rbegin(self)

    def rend(self):
        """
        rend(StringToDoubleMap self) -> std::map< std::string,double >::reverse_iterator

        Parameters:
            self: std::map< std::string,double > *

        """
        return _donutengine.StringToDoubleMap_rend(self)

    def count(self, *args):
        """
        count(StringToDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type

        Parameters:
            x: std::map< std::string,double >::key_type const &

        """
        return _donutengine.StringToDoubleMap_count(self, *args)

    def erase(self, *args):
        """
        erase(StringToDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type

        Parameters:
            x: std::map< std::string,double >::key_type const &

        erase(StringToDoubleMap self, std::map< std::string,double >::iterator position)

        Parameters:
            position: std::map< std::string,double >::iterator

        erase(StringToDoubleMap self, std::map< std::string,double >::iterator first, std::map< std::string,double >::iterator last)

        Parameters:
            first: std::map< std::string,double >::iterator
            last: std::map< std::string,double >::iterator

        """
        return _donutengine.StringToDoubleMap_erase(self, *args)

    def find(self, *args):
        """
        find(StringToDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator

        Parameters:
            x: std::map< std::string,double >::key_type const &

        """
        return _donutengine.StringToDoubleMap_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(StringToDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator

        Parameters:
            x: std::map< std::string,double >::key_type const &

        """
        return _donutengine.StringToDoubleMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(StringToDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator

        Parameters:
            x: std::map< std::string,double >::key_type const &

        """
        return _donutengine.StringToDoubleMap_upper_bound(self, *args)

    __swig_destroy__ = _donutengine.delete_StringToDoubleMap
    __del__ = lambda self : None;
StringToDoubleMap_swigregister = _donutengine.StringToDoubleMap_swigregister
StringToDoubleMap_swigregister(StringToDoubleMap)

class DonutEngine(_object):
    """Proxy of C++ DonutEngine class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DonutEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DonutEngine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DonutEngine self, StringToStringMap inputMapS, StringToIntMap inputMapI, StringToDoubleMap inputMapD) -> DonutEngine

        Parameters:
            inputMapS: MapStoS
            inputMapI: MapStoI
            inputMapD: MapStoD

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64, char const * outputPrefix="test", bool debugFlag=False, int printLevel=0, 
            bool gridCalcMode=True, int pixelOverSample=4, double scaleFactor=2.0, 
            char const * inputPupilMask="", int zemaxToDECamSignFlip=-1) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int
            outputPrefix: char const *
            debugFlag: bool
            printLevel: int
            gridCalcMode: bool
            pixelOverSample: int
            scaleFactor: double
            inputPupilMask: char const *
            zemaxToDECamSignFlip: int

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64, char const * outputPrefix="test", bool debugFlag=False, int printLevel=0, 
            bool gridCalcMode=True, int pixelOverSample=4, double scaleFactor=2.0, 
            char const * inputPupilMask="") -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int
            outputPrefix: char const *
            debugFlag: bool
            printLevel: int
            gridCalcMode: bool
            pixelOverSample: int
            scaleFactor: double
            inputPupilMask: char const *

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64, char const * outputPrefix="test", bool debugFlag=False, int printLevel=0, 
            bool gridCalcMode=True, int pixelOverSample=4, double scaleFactor=2.0) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int
            outputPrefix: char const *
            debugFlag: bool
            printLevel: int
            gridCalcMode: bool
            pixelOverSample: int
            scaleFactor: double

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64, char const * outputPrefix="test", bool debugFlag=False, int printLevel=0, 
            bool gridCalcMode=True, int pixelOverSample=4) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int
            outputPrefix: char const *
            debugFlag: bool
            printLevel: int
            gridCalcMode: bool
            pixelOverSample: int

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64, char const * outputPrefix="test", bool debugFlag=False, int printLevel=0, 
            bool gridCalcMode=True) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int
            outputPrefix: char const *
            debugFlag: bool
            printLevel: int
            gridCalcMode: bool

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64, char const * outputPrefix="test", bool debugFlag=False, int printLevel=0) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int
            outputPrefix: char const *
            debugFlag: bool
            printLevel: int

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64, char const * outputPrefix="test", bool debugFlag=False) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int
            outputPrefix: char const *
            debugFlag: bool

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64, char const * outputPrefix="test") -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int
            outputPrefix: char const *

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256, 
            int nPixels=64) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int
            nPixels: int

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11, int nbin=256) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int
            nbin: int

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9, int nZernikeTerms=11) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double
            nZernikeTerms: int

        __init__(DonutEngine self, int iTelescope=0, double waveLength=700.0e-9) -> DonutEngine

        Parameters:
            iTelescope: int
            waveLength: double

        __init__(DonutEngine self, int iTelescope=0) -> DonutEngine

        Parameters:
            iTelescope: int

        __init__(DonutEngine self) -> DonutEngine
        """
        this = _donutengine.new_DonutEngine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _donutengine.delete_DonutEngine
    __del__ = lambda self : None;
    def resetTimers(self):
        """
        resetTimers(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_resetTimers(self)

    def printTimers(self):
        """
        printTimers(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_printTimers(self)

    def getvParCurrent(self):
        """
        getvParCurrent(DonutEngine self) -> Vector &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvParCurrent(self)

    def getvDerivatives(self):
        """
        getvDerivatives(DonutEngine self) -> Vector &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvDerivatives(self)

    def savePar(self):
        """
        savePar(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_savePar(self)

    def printOptions(self):
        """
        printOptions(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_printOptions(self)

    def closeFits(self):
        """
        closeFits(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_closeFits(self)

    def calcWFMtoImage(self, *args):
        """
        calcWFMtoImage(DonutEngine self, Real * par)

        Parameters:
            par: Real *

        calcWFMtoImage(DonutEngine self, double * par)

        Parameters:
            par: double *

        """
        return _donutengine.DonutEngine_calcWFMtoImage(self, *args)

    def calcPsfToImage(self, *args):
        """
        calcPsfToImage(DonutEngine self, Real * par)

        Parameters:
            par: Real *

        calcPsfToImage(DonutEngine self, double * par)

        Parameters:
            par: double *

        """
        return _donutengine.DonutEngine_calcPsfToImage(self, *args)

    def calcAll(self, *args):
        """
        calcAll(DonutEngine self, Real * par)

        Parameters:
            par: Real *

        calcAll(DonutEngine self, double * par)

        Parameters:
            par: double *

        """
        return _donutengine.DonutEngine_calcAll(self, *args)

    def calcDerivatives(self, *args):
        """
        calcDerivatives(DonutEngine self, Real * image, Real * weight)

        Parameters:
            image: Real *
            weight: Real *

        calcDerivatives(DonutEngine self, double * image, double * weight)

        Parameters:
            image: double *
            weight: double *

        """
        return _donutengine.DonutEngine_calcDerivatives(self, *args)

    def getParCurrent(self):
        """
        getParCurrent(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getParCurrent(self)

    def getDerivatives(self):
        """
        getDerivatives(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getDerivatives(self)

    def setXYDECam(self, *args):
        """
        setXYDECam(DonutEngine self, double x, double y)

        Parameters:
            x: double
            y: double

        """
        return _donutengine.DonutEngine_setXYDECam(self, *args)

    def getXaxis(self):
        """
        getXaxis(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getXaxis(self)

    def getYaxis(self):
        """
        getYaxis(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getYaxis(self)

    def getRho(self):
        """
        getRho(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getRho(self)

    def getTheta(self):
        """
        getTheta(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getTheta(self)

    def getPixelBox(self):
        """
        getPixelBox(DonutEngine self) -> MatrixC &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getPixelBox(self)

    def getFtsPixel(self):
        """
        getFtsPixel(DonutEngine self) -> MatrixC &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getFtsPixel(self)

    def getPupilMask(self):
        """
        getPupilMask(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getPupilMask(self)

    def getPupilWaveZernike(self):
        """
        getPupilWaveZernike(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getPupilWaveZernike(self)

    def getPupilFunc(self):
        """
        getPupilFunc(DonutEngine self) -> MatrixC &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getPupilFunc(self)

    def getPsfOptics(self):
        """
        getPsfOptics(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getPsfOptics(self)

    def getFtsOptics(self):
        """
        getFtsOptics(DonutEngine self) -> MatrixC &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getFtsOptics(self)

    def getPsfAtmos(self):
        """
        getPsfAtmos(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getPsfAtmos(self)

    def getFtsAtmos(self):
        """
        getFtsAtmos(DonutEngine self) -> MatrixC &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getFtsAtmos(self)

    def getConvOpticsAtmosPixel(self):
        """
        getConvOpticsAtmosPixel(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getConvOpticsAtmosPixel(self)

    def getValPixelCenters(self):
        """
        getValPixelCenters(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getValPixelCenters(self)

    def getImage(self):
        """
        getImage(DonutEngine self) -> Matrix &

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getImage(self)

    def getZernikeObject(self):
        """
        getZernikeObject(DonutEngine self) -> Zernike *

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getZernikeObject(self)

    def getvXaxis(self):
        """
        getvXaxis(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvXaxis(self)

    def getvYaxis(self):
        """
        getvYaxis(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvYaxis(self)

    def getvRho(self):
        """
        getvRho(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvRho(self)

    def getvTheta(self):
        """
        getvTheta(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvTheta(self)

    def getvPixelBox(self):
        """
        getvPixelBox(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvPixelBox(self)

    def getvFtsPixel(self):
        """
        getvFtsPixel(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvFtsPixel(self)

    def getvPupilMask(self):
        """
        getvPupilMask(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvPupilMask(self)

    def getvPupilWaveZernike(self):
        """
        getvPupilWaveZernike(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvPupilWaveZernike(self)

    def getvPupilFunc(self):
        """
        getvPupilFunc(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvPupilFunc(self)

    def getvPsfOptics(self):
        """
        getvPsfOptics(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvPsfOptics(self)

    def getvFtsOptics(self):
        """
        getvFtsOptics(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvFtsOptics(self)

    def getvPsfAtmos(self):
        """
        getvPsfAtmos(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvPsfAtmos(self)

    def getvFtsAtmos(self):
        """
        getvFtsAtmos(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvFtsAtmos(self)

    def getvConvOpticsAtmosPixel(self):
        """
        getvConvOpticsAtmosPixel(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvConvOpticsAtmosPixel(self)

    def getvValPixelCenters(self):
        """
        getvValPixelCenters(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvValPixelCenters(self)

    def getvImage(self):
        """
        getvImage(DonutEngine self)

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getvImage(self)

    def getScaleFactor(self):
        """
        getScaleFactor(DonutEngine self) -> double

        Parameters:
            self: DonutEngine *

        """
        return _donutengine.DonutEngine_getScaleFactor(self)

    __swig_setmethods__["ipar_nEle"] = _donutengine.DonutEngine_ipar_nEle_set
    __swig_getmethods__["ipar_nEle"] = _donutengine.DonutEngine_ipar_nEle_get
    if _newclass:ipar_nEle = _swig_property(_donutengine.DonutEngine_ipar_nEle_get, _donutengine.DonutEngine_ipar_nEle_set)
    __swig_setmethods__["ipar_rzero"] = _donutengine.DonutEngine_ipar_rzero_set
    __swig_getmethods__["ipar_rzero"] = _donutengine.DonutEngine_ipar_rzero_get
    if _newclass:ipar_rzero = _swig_property(_donutengine.DonutEngine_ipar_rzero_get, _donutengine.DonutEngine_ipar_rzero_set)
    __swig_setmethods__["ipar_bkgd"] = _donutengine.DonutEngine_ipar_bkgd_set
    __swig_getmethods__["ipar_bkgd"] = _donutengine.DonutEngine_ipar_bkgd_get
    if _newclass:ipar_bkgd = _swig_property(_donutengine.DonutEngine_ipar_bkgd_get, _donutengine.DonutEngine_ipar_bkgd_set)
    __swig_setmethods__["ipar_ZernikeFirst"] = _donutengine.DonutEngine_ipar_ZernikeFirst_set
    __swig_getmethods__["ipar_ZernikeFirst"] = _donutengine.DonutEngine_ipar_ZernikeFirst_get
    if _newclass:ipar_ZernikeFirst = _swig_property(_donutengine.DonutEngine_ipar_ZernikeFirst_get, _donutengine.DonutEngine_ipar_ZernikeFirst_set)
    __swig_setmethods__["ipar_ZernikeLast"] = _donutengine.DonutEngine_ipar_ZernikeLast_set
    __swig_getmethods__["ipar_ZernikeLast"] = _donutengine.DonutEngine_ipar_ZernikeLast_get
    if _newclass:ipar_ZernikeLast = _swig_property(_donutengine.DonutEngine_ipar_ZernikeLast_get, _donutengine.DonutEngine_ipar_ZernikeLast_set)
    __swig_setmethods__["npar"] = _donutengine.DonutEngine_npar_set
    __swig_getmethods__["npar"] = _donutengine.DonutEngine_npar_get
    if _newclass:npar = _swig_property(_donutengine.DonutEngine_npar_get, _donutengine.DonutEngine_npar_set)
    __swig_setmethods__["_nbin"] = _donutengine.DonutEngine__nbin_set
    __swig_getmethods__["_nbin"] = _donutengine.DonutEngine__nbin_get
    if _newclass:_nbin = _swig_property(_donutengine.DonutEngine__nbin_get, _donutengine.DonutEngine__nbin_set)
    __swig_setmethods__["_nPixels"] = _donutengine.DonutEngine__nPixels_set
    __swig_getmethods__["_nPixels"] = _donutengine.DonutEngine__nPixels_get
    if _newclass:_nPixels = _swig_property(_donutengine.DonutEngine__nPixels_get, _donutengine.DonutEngine__nPixels_set)
    __swig_setmethods__["_pixelOverSample"] = _donutengine.DonutEngine__pixelOverSample_set
    __swig_getmethods__["_pixelOverSample"] = _donutengine.DonutEngine__pixelOverSample_get
    if _newclass:_pixelOverSample = _swig_property(_donutengine.DonutEngine__pixelOverSample_get, _donutengine.DonutEngine__pixelOverSample_set)
    __swig_setmethods__["parNames"] = _donutengine.DonutEngine_parNames_set
    __swig_getmethods__["parNames"] = _donutengine.DonutEngine_parNames_get
    if _newclass:parNames = _swig_property(_donutengine.DonutEngine_parNames_get, _donutengine.DonutEngine_parNames_set)
    __swig_setmethods__["parTitles"] = _donutengine.DonutEngine_parTitles_set
    __swig_getmethods__["parTitles"] = _donutengine.DonutEngine_parTitles_get
    if _newclass:parTitles = _swig_property(_donutengine.DonutEngine_parTitles_get, _donutengine.DonutEngine_parTitles_set)
    __swig_setmethods__["nCallsCalcAll"] = _donutengine.DonutEngine_nCallsCalcAll_set
    __swig_getmethods__["nCallsCalcAll"] = _donutengine.DonutEngine_nCallsCalcAll_get
    if _newclass:nCallsCalcAll = _swig_property(_donutengine.DonutEngine_nCallsCalcAll_get, _donutengine.DonutEngine_nCallsCalcAll_set)
    __swig_setmethods__["nCallsCalcDerivative"] = _donutengine.DonutEngine_nCallsCalcDerivative_set
    __swig_getmethods__["nCallsCalcDerivative"] = _donutengine.DonutEngine_nCallsCalcDerivative_get
    if _newclass:nCallsCalcDerivative = _swig_property(_donutengine.DonutEngine_nCallsCalcDerivative_get, _donutengine.DonutEngine_nCallsCalcDerivative_set)
    __swig_setmethods__["nZernikeSize"] = _donutengine.DonutEngine_nZernikeSize_set
    __swig_getmethods__["nZernikeSize"] = _donutengine.DonutEngine_nZernikeSize_get
    if _newclass:nZernikeSize = _swig_property(_donutengine.DonutEngine_nZernikeSize_get, _donutengine.DonutEngine_nZernikeSize_set)
DonutEngine_swigregister = _donutengine.DonutEngine_swigregister
DonutEngine_swigregister(DonutEngine)

def donutengine(**inputDict):
  """  donutengine class for calculating out-of-focus star images from Zernike pupil basis """

  # special code for scaleFactor - be sure it is a float
  if inputDict.has_key("scaleFactor"):
    inputDict["scaleFactor"] = float(inputDict["scaleFactor"])

  # split inputDict into 3 dictionaries - S,I,D
  paramDictS = {}
  paramDictI = {}
  paramDictD = {}
  for key in inputDict.keys():
    value = inputDict[key]
    if isinstance(value,str):
      paramDictS[key] = value
    elif isinstance(value,int):
      paramDictI[key] = value
    elif isinstance(value,float):
      paramDictD[key] = value
   
  # setup the fit engine
  myDE = DonutEngine(paramDictS,paramDictI,paramDictD)

  return myDE


# This file is compatible with both classic and new-style classes.


